=head1 SEEDtk Project Notes

This file contains important notes about the SEEDtk programming environment.

=head1 Directory Configuration

The default directory structure includes a I<data directory>, a I<source directory>,
and a I<web directory>.

=head2 The Source Directory

The source directory will generally be stored somewhere controlled by the GIT
source control system. Inside the source directory are four important folders.

=over 4

=item config

This contains the configuration files. The folder contains a C<.gitignore> file
that prevents any of its contents from being pushed to the source control
repository. This means that items in this directory are not shared.

=item utils

This contains the main scripts.

=item kernel

This contains the kernel PERL modules.

=item ERDB

This contains the PERL modules for the ERDB database layer.

=back

=head3 FIG_Config

The structural information about the SEEDtk environment is kept in the L<FIG_Config> file
in the B<config> directory. You can add new PERL library folders by putting them in the
B<@plibs> variable and new script folders by putting them in the B<@pscripts> variable.
After changing the FIG_Config, run the L<Config.pl> script with the C<--fc=off> option,
which will update the environment script C<Uconfig.sh>. After updating this script,
you will need to restart your shell and do another

    source SEEDtk/UConfig.sh

command.

In Windows, you can direct L<Config.pl> to write environment information to the
system registry. If this is the case, you must reboot the system to access the
new environment.

=head2 The Data Directory

Inside the data directory there are two main folders.

=over 4

=item Inputs

The default holding place for data to be loaded into the database. Genome
directories are stored in C<Inputs/GenomeData> and subsystem directories in
C<Inputs/SubSystemData>.

=item LoadFiles

The storage directory for the files used to load the database.

=back

=head2 The Web Directory

The web directory contains files that produce a web site with useful development
features. This web site is designed for use as a localhost server on a laptop
or desktop PC as opposed to on an actual Unix server. This requires a great
deal of setup, so its use is entirely optional; however, it provides the
benefits of easy access to the POD documentation, quick testing of simple PERL
scripts, and display of the DBD.

If you do not intend to use the localhost server, the web directory is designed
to operate on your public Unix web directory; however, this is not available yet.

=head3 SEEDTK CODE Facility

The main page has a list of search boxes including one labeled C<SEEDTK CODE>.
Type the name of a perl module in this box, or the name of a script (including
the C<.pl> suffix) to see the relevant POD documentation.

The buttons below the box have the following functions.

=over 4

=item Links

Display B<Links.html>, a page of useful web links. You can edit this file yourself,
but a default is generated by L<Configure.pl>.

=item DBD

Display the Shrub database design.

=item Methods

Display a page containing forms that help to generate method documentation and test
simple PERL scripts.

=item Scripts

Display a list of command-line scripts and their functions.

=item ENV

Display the environment variables.

=item Config

Display the configuration variables and their values.

=back

=head2 The DNA Repository

Each database has a DNA Repository containing the DNA sequences for each genome. If you are
developing using a local database, then this should point to a local directory (usually
C<DnaRepo> in the data directory). If you are using a shared database, B<you must use the
repository belonging to that database>. The location of the DNA Repository is specified
in your L<FIG_Config> file, which is also where you specify the location of the database.
Both of these things can be overridden onthe command line when you invoke a database
application.

=head1 Setting up a Unix Environment

In the examples below, it will be assumed your user name is C<self>. Simply substitute your real username
when typing the commands.

First, you need a user name and password on GITHUB, and it must be an authorized contributor to the C<seedtk_test>
repository. To insure that you are appropriately identtified, tell GIT your name and EMAIL.

    git config user.name yourFullName
    git config user.email yourGitHubEmail

Position in your home directory with the B<bash> shell active.

Clone the repository using GIT.

    git clone https://self@github.com/bparrello/seedtk_test.git SEEDtk

You will be prompted for a password. A new directory C<SEEDtk> will be created at the current
location and the SEEDtk files will be loaded into it.

At this point I recommend changing to the SEEDtk directory, as it simplifies most of the paths
you'll have to type.

    cd SEEDtk

The next step is to create a data directory. You can create your own private data directory or you
can use an existing one. For this example, we'll create a private one right under SEEDtk and make
it writable by the FIG group.

    mkdir Data
    chmod g+ws Data
    chgrp fig Data

Now we need to get access to the correct version of PERL. To do this, you type

    source source/config/PerlPath.sh

We are now ready to bootstrap the system using the L<Config.pl> script. Type

    perl source/utils/Config.pl --dirs --links --dna=/homes/parrello/DnaRepo --home=/homes/self/public_html Data Web

Here C<Data> should be your data directory, and C</homes/self/public_html> the path to a web-addressable
directory, usually C<public_html> in your home directory.

Now exit from bash. From this point on, to get yourself into a SEEDtk environment, you simply type

    sudo -u fig bash
    source ~self/SEEDtk/UConfig.sh

where as before C<self> is your user name. You will be placed in the B<SEEDtk> development directory
and can enter batch commands. To test your installation, type

    ShowEcRoles.pl

You should get a long list of roles and EC numbers. This verifies that you are connected to the
database properly.

=head2 Notes on L<Config.pl>

The L<Config.pl> script is one you will use frequently to insure your environment is up-to-date,
but once the environment is active you will not need to type as many options as you did during
configuration. Most of the time you'll just enter

    Config.pl

directly and everything will be fixed up automatically. You will not need to do this every time you
change the code, only when you add a new script, update L<FIG_Config>, or an environment change is
made to the system as a whole.

=head1 Using Git

On this project, you will at all times be dealing with two source control repositories. One of them
is the local repository on your hard disk. You will be making commits to this repository frequently,
a process that gives you a useful backup and history of your work. There is also the GITHUB repository
in the cloud. This is shared by everyone on the project. You will be making commits to this more
rarely.

Before you do anything, your local repository should be in a committed state. To check the state, use

    git status -v

which will tell you what has changed since your last commit. To commit your changes, use

    git commit -a -m "commit message"

where C<commit message> is a brief description of your changes. YOU MUST NEVER FORGET TO ADD THE
MESSAGE. If you do, you will be forced to use the VI editor as punishment.

Once your repository is in a committed state, you can get the latest changes from the shared
repository using

    git pull

Sometimes this may reveal merge conflicts. This will require editing the file to resolve the conflicts,
after which you must re-add the file to the index

    git add path/to/file

and then commit again.

To push your changes to the repository, use

    git push

Sometimes you will get a C<Forbidden> error. The most common causes of this error are

over =4

=item 1

The shared repository has changed recently and you have to do B<pull> first.

=item 2

You have uncommitted changes in your local repository.

=item 3

You typed the wrong password. Note there is a way to use SSH keys to bypass the need for passwords,
but these are not set up yet. We're working on it.

=back

There are numerous other features and capabilities in GIT; however, these will get you through almost all
of the tasks you need to do.

=cut

1;